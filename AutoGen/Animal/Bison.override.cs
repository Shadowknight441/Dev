// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from AnimalTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using System.Collections.Generic;
    using Eco.Core.Items;
    using Eco.Gameplay.Animals;
    using Eco.Mods.Organisms;
    using Eco.Mods.Organisms.Behaviors;
    using Eco.Shared.Localization;
    using Eco.Shared.Math;
    using Vector3 = System.Numerics.Vector3;
    using Eco.Simulation.Agents;
    using Eco.Simulation.Types;
    using Eco.Shared.SharedTypes;

    /// <summary>
    /// <para>Server side animal entity definition for "Bison".</para>
    /// <para>More information about AnimalEntity objects can be found at https://docs.play.eco/api/server/eco.gameplay/Eco.Gameplay.Animals.AnimalEntity.html</para>
    /// <remarks>
    /// This is an auto-generated class. Don't modify it! All your changes will be wiped with next update! Use Mods* partial methods instead for customization. 
    /// If you wish to modify this class, please create a new partial class or follow the instructions in the "UserCode" folder to override the entire file.
    /// </remarks>
    /// </summary>
    public class Bison : AnimalEntity
    {
        public Bison(Animal parent, Vector3 pos, bool corpse = false) : base(parent, pos, species, corpse) { }
        static AnimalSpecies species;

        /// <summary>
        /// <para>Server side species definition for "Bison".</para>
        /// <para>More information about AnimalSpecies objects can be found at https://docs.play.eco/api/server/eco.simulation/Eco.Simulation.Types.AnimalSpecies.html</para>
        /// </summary>
        /// <inheritdoc/>
        [Ecopedia("Animals", "Mammals", createAsSubPage: true)]
        [Localized(false, true)]
        public class BisonSpecies : AnimalSpecies
        {
            public BisonSpecies() : base()
            {
                species = this; // Set the static species variable from our AnimalEntity instance to ourselves for lookup later
                this.InstanceType = typeof(Bison); // Define our instance type to be a typeof instance of our selves.

                // Define the species name, display name, and description here. These values will be used to represent the animal to the client user.
                this.Name = "Bison"; //noloc
                this.DisplayName = Localizer.DoStr("Bison");
                this.DisplayDescription = Localizer.DoStr("A massive, shaggy mammal with a large head, humped shoulders, and distinctive curved horns. Often seen grazing on grasslands and prairies, bison are an important example of a species that has made a remarkable comeback from the brink of extinction due to conservation efforts.");

                // Define our how long in days it takes this species to mature
                this.MaturityAgeDays = 1;
                
                // Define what our species eats as object type representations as well as our calorie value.
                // If our species does not eat anything the FoodSources variable can represent an empty List object.
                this.FoodSources = new List<System.Type>()
                {
                    typeof(CommonGrass),
                    typeof(Bunchgrass),
                    typeof(Wheat),
                    typeof(BigBluestem),
                    typeof(Switchgrass),
                };
                this.CalorieValue = 250;

                // Movement
                this.WanderingSpeed = 1;
                this.Speed = 4;
                this.ClimbHeight = 1;
                this.RotationSpeed = 45;
                this.WanderingRotationSpeed = 22.5f;
                this.MinRotationToSlowDown = 10;

                // Resources
                this.ResourceList = new List<SpeciesResource>()
                {
                    new SpeciesResource(typeof(BisonCarcassItem), new Range(1, 1)),
					new SpeciesResource(typeof(BabyBisonItem), new Range(0.0f, 0.75f)),
                };
                this.ResourceBonusAtGrowth = 0.9f;
                
                // Behavior
                this.BrainType = typeof(HerdAnimalBrain);
                this.Health = 2;
                this.Damage = 1;
                this.DelayBetweenAttacksRangeSec = new Range(0.8f, 2.5f);
                this.FearFactor = 0.6f;
                this.FleePlayers = true;
                this.AttackRange = 1;
                this.HeadDistance = 1;
                this.TimeLayToStand = 4;
                this.TimeStandToLay = 3;
                // Climate
                this.ReleasesCO2TonsPerDay = 0.2f;
            }
        }
    

        public override void FleeFrom(Vector3 position, double fleeDuration, bool forceTick)
        {
            base.FleeFrom(position, fleeDuration, forceTick);
            GroupBehaviors.SyncFleePosition(this, fleeDuration);
        }

    }
}
