// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
      using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]                   
    [RequireComponent(typeof(PublicStorageComponent))]                
    [RequireComponent(typeof(SolidGroundComponent))]            
    public partial class OreSiloObject : WorldObject, IRepresentsItem
    {
        public override LocString DisplayName { get { return Localizer.DoStr("Crushed Ore Silo"); } } 
        public override TableTextureMode TableTexture => TableTextureMode.Wood; 
        public virtual Type RepresentedItemType { get { return typeof(OreSiloItem); } } 



        protected override void Initialize()
        {
            this.ModsPreInitialize();
            var storage = this.GetComponent<PublicStorageComponent>();
            storage.Initialize(50);
            storage.Storage.AddInvRestriction(new StackLimitRestriction(25));
            storage.Storage.AddInvRestriction(new TagRestriction("CrushedRock", "OreSilo")); // can only store crushed rocks or ores
            this.ModsPostInitialize();
        }

        public override void Destroy()
        {
            base.Destroy();
        }

        /// <summary>Hook for mods to customize WorldObject before initialization. You can change housing values here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize WorldObject after initialization.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Crushed Ore Silo")]
    [Ecopedia("Crafted Objects", "Storage", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]                                                                           
    public partial class OreSiloItem : WorldObjectItem<OreSiloObject> 
    {
        public override LocString DisplayDescription => Localizer.DoStr("A metal silo capable of storing extra large stacks of crushed rock and ore. Silos are not able to store other types of materials.");


    }

    [RequiresSkill(typeof(BasicEngineeringSkill), 4)]     
    public partial class OreSiloRecipe : RecipeFamily
    {
        public OreSiloRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                "CrushedOreSilo",   //noloc
                Localizer.DoStr("Crushed Ore Silo"),
                new List<IngredientElement>
                {
                    new IngredientElement(typeof(IronPipeItem), 6, typeof(BasicEngineeringSkill), typeof(BasicEngineeringLavishResourcesTalent)), 
                    new IngredientElement(typeof(IronBarItem), 20, typeof(BasicEngineeringSkill), typeof(BasicEngineeringLavishResourcesTalent)),    
                    new IngredientElement("Lumber", 8, typeof(BasicEngineeringSkill), typeof(BasicEngineeringLavishResourcesTalent)),    
                },
                new List<CraftingElement>
                {
                    new CraftingElement<OreSiloItem>()
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 3;  
            this.LaborInCalories = CreateLaborInCaloriesValue(1000, typeof(BasicEngineeringSkill)); 
            this.CraftMinutes = CreateCraftTimeValue(typeof(OreSiloRecipe), 10, typeof(BasicEngineeringSkill), typeof(BasicEngineeringFocusedSpeedTalent), typeof(BasicEngineeringParallelSpeedTalent));     
            this.ModsPreInitialize();
            this.Initialize(Localizer.DoStr("Crushed Ore Silo"), typeof(OreSiloRecipe));
            this.ModsPostInitialize();
            CraftingComponent.AddRecipe(typeof(SawmillObject), this);
        }

        /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }
}
